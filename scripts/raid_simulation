import os
import time
import random
from minio import Minio

# MinIO client configuration
region1 = Minio("localhost:9003", access_key="minioadmin", secret_key="minioadmin", secure=False)

# Directories for multiple drives
drives = ["./data1", "./data2", "./data3", "./data4"]
sample_data_dir = "./sample_data"
bucket_name = "test-bucket"

# Generate a large dataset with varying file sizes
def generate_large_dataset(num_files=100):
    print(f"Generating {num_files} files...")
    os.makedirs(sample_data_dir, exist_ok=True)
    for i in range(num_files):
        filename = f"file_{i+1}.txt"
        size_kb = random.randint(1, 1024)  # Random size between 1 KB and 1 MB
        file_path = os.path.join(sample_data_dir, filename)
        with open(file_path, "w") as f:
            content = f"File Name: {filename}\n" + ("Sample Data\n" * (size_kb * 1024 // 11))
            f.write(content)
        print(f"Generated: {filename} ({size_kb} KB)")

# Upload files to the bucket
def upload_files_to_bucket(bucket_name):
    print(f"Uploading files to bucket: {bucket_name}")
    if not region1.bucket_exists(bucket_name):
        region1.make_bucket(bucket_name)
    for filename in os.listdir(sample_data_dir):
        file_path = os.path.join(sample_data_dir, filename)
        region1.fput_object(bucket_name, filename, file_path)
        print(f"Uploaded: {filename}")

# Simulate a drive failure by renaming a drive directory
def simulate_drive_failure(drive):
    print(f"Simulating failure of drive: {drive}")
    if os.path.exists(drive):
        failed_drive = f"{drive}_failed"
        os.rename(drive, failed_drive)
        print(f"Drive {drive} renamed to {failed_drive}")

# Restore the drive to its original state
def restore_drive(drive):
    failed_drive = f"{drive}_failed"
    if os.path.exists(failed_drive):
        os.rename(failed_drive, drive)
        print(f"Drive {failed_drive} restored to {drive}")

# Test data accessibility after drive failure
def test_data_access(bucket_name):
    print(f"Testing data access after drive failure...")
    start_time = time.time()
    objects = region1.list_objects(bucket_name, recursive=True)
    accessible_count = 0
    for obj in objects:
        try:
            data = region1.get_object(bucket_name, obj.object_name)
            data.read()  # Read data to ensure it's accessible
            accessible_count += 1
            print(f"Accessible: {obj.object_name}")
        except Exception as e:
            print(f"Failed to access {obj.object_name}: {e}")
    end_time = time.time()
    print(f"Accessible files: {accessible_count}")
    print(f"Data access test completed in {end_time - start_time:.2f} seconds")

# Main function
def main():
    print("Starting RAID Simulation Scenario...")

    # Step 1: Prepare RAID-like setup (ensure drive directories exist)
    for drive in drives:
        os.makedirs(drive, exist_ok=True)

    # Step 2: Generate sample data
    generate_large_dataset(100)

    # Step 3: Upload files to the bucket
    upload_files_to_bucket(bucket_name)

    # Step 4: Simulate a drive failure
    simulate_drive_failure(drives[0])  # Fail the first drive

    # Step 5: Test data access after failure
    test_data_access(bucket_name)

    # Step 6: Restore the failed drive
    restore_drive(drives[0])

    print("RAID Simulation Scenario Completed.")

if __name__ == "__main__":
    main()
